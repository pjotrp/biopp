//
// File: PGFGraphicDevice.cpp
// Created by: Julien Dutheil
// Created on: Thu Jun 19 2008
//

/*
Copyright or Â© or Copr. CNRS, (November 17, 2004)

This software is a computer program whose purpose is to provide utilitary
classes. This file belongs to the Bio++ Project.

This software is governed by the CeCILL  license under French law and
abiding by the rules of distribution of free software.  You can  use, 
modify and/ or redistribute the software under the terms of the CeCILL
license as circulated by CEA, CNRS and INRIA at the following URL
"http://www.cecill.info". 

As a counterpart to the access to the source code and  rights to copy,
modify and redistribute granted by the license, users are provided only
with a limited warranty  and the software's author,  the holder of the
economic rights,  and the successive licensors  have only  limited
liability. 

In this respect, the user's attention is drawn to the risks associated
with loading,  using,  modifying and/or developing or reproducing the
software by the user in light of its specific status of free software,
that may mean  that it is complicated to manipulate,  and  that  also
therefore means  that it is reserved for developers  and  experienced
professionals having in-depth computer knowledge. Users are therefore
encouraged to load and test the software's suitability as regards their
requirements in conditions enabling the security of their systems and/or 
data to be ensured and,  more generally, to use and operate it in the 
same conditions as regards security. 

The fact that you are presently reading this means that you have had
knowledge of the CeCILL license and that you accept its terms.
*/

#include "PGFGraphicDevice.h"
using namespace bpp;

#include<algorithm>
using namespace std;

void PGFGraphicDevice::beginDocument()
{
  _content.clear();
  _layers.clear();
  _colorIndex.clear();
  _colorCount = 0;
  _useLayers = false;
}

bool comp( int a, int b ) { return a > b; } ;
void PGFGraphicDevice::endDocument()
{
  ostringstream oss;
  if(_useLayers)
    oss << "\\end{pgfonlayer}{" << TextTools::toString(_currentLayer) << "}" << endl;
  _content.push_back(oss.str());

  //Header:
  _out << "\\documentclass{article}" << endl;
  _out << "% This figure was generated by the Bio++ PGF Graphic Device." << endl;
  _out << "% Althought this file can be compiled 'as is' it may not be displayed correctly, depending on the size of the picture." << endl;
  _out << "% You may consider copying the pgfpicture environment to your own LaTeX file and play with pgf settings (e.g. the pgfpages module)." << endl;
  _out << "\\usepackage{pgf}" << endl;
  for(map<const RGBColor,string>::iterator it = _colorIndex.begin(); it != _colorIndex.end(); it++)
  {
    if(it->second.substr(0,3) == "use")
      _out << "\\definecolor{" << it->second << "}{rgb}{" << it->first[0]/255. << "," << it->first[1]/255. << "," << it->first[2]/255. << "}" << endl;    
  }
  _out << "\\begin{document}" << endl;

  //Declare and set layers:
  if(_useLayers)
  {
    string tmp;
    sort(_layers.begin(), _layers.end(), comp);
    for(unsigned int i = 0; i < _layers.size(); i++)
    {
      if(i > 0) tmp += ",";
      tmp += TextTools::toString(_layers[i]);
      _out << "\\pgfdeclarelayer{" << _layers[i] << "}" << endl;
    }
    _out << "\\pgfsetlayers{" << tmp << "}" << endl;
  }

  //Start picture:
  _out << "\\begin{pgfpicture}" << endl;
  _out << "\\pgfsetxvec{\\pgfpoint{" << _unit << "cm}{0cm}}" << endl;
  _out << "\\pgfsetyvec{\\pgfpoint{0cm}{-" << _unit << "cm}}" << endl;
  
  for(unsigned int i = 0; i < _content.size(); i++)
  {
    _out << _content[i] << endl;
  }
  
  _out << "\\end{pgfpicture}" << endl;
  _out << "\\end{document}" << endl;
}

void PGFGraphicDevice::setCurrentForegroundColor(const RGBColor & color)
{
  map<const RGBColor, string>::iterator it = _colorIndex.find(color);
  if(it != _colorIndex.end())
  {
    _fgColor = it->second;
  }
  else
  {
    _colorCount++;
    _fgColor = "usercolor" + TextTools::toString(_colorCount);
    _colorIndex[color] = _fgColor;
  }
  ostringstream oss;
  oss << "\\pgfsetstrokecolor{" << _fgColor << "}" << endl;
  _content.push_back(oss.str());
}

void PGFGraphicDevice::setCurrentBackgroundColor(const RGBColor & color)
{
  map<const RGBColor, string>::iterator it = _colorIndex.find(color);
  if(it != _colorIndex.end())
  {
    _bgColor = it->second;
  }
  else
  {
    _colorCount++;
    _bgColor = "usercolor" + TextTools::toString(_colorCount);
    _colorIndex[color] = _bgColor;
  }
  ostringstream oss;
  oss << "\\pgfsetfillcolor{" << _bgColor << "}" << endl;
  _content.push_back(oss.str());
}

void PGFGraphicDevice::setCurrentFont(const Font & font)
{
  _font = font;
  ostringstream oss;
  oss << "\\fontfamily{" << _font.getFamily() << "}" << endl;
  oss << "\\fontshape{" << _font.getType() << "}" << endl;
  oss << "\\fontsize{" << _font.getSize() << "}{" << _font.getSize() << "}" << endl;
  oss << "\\selectfont" << endl;
  _content.push_back(oss.str());
}

void PGFGraphicDevice::setCurrentPointSize(unsigned int size)
{
  _pointSize = size;
  ostringstream oss;
  oss << "\\pgfsetlinewidth{" << (size * _unit) << "}" << endl;
  _content.push_back(oss.str());
}

void PGFGraphicDevice::setCurrentLineType(short type) throw (Exception)
{ 
  if(type == LINE_SOLID)
  {
    _lineType = type;
    ostringstream oss;
    oss << "\\pgfsetdash{}{0pt}" << endl;
    _content.push_back(oss.str());
  }
  else if(type == LINE_DASHED)
  {
    _lineType = type;
    ostringstream oss;
    oss << "\\pgfsetdash{{3mm}{2mm}}{0pt}" << endl;
    _content.push_back(oss.str());
  }
  else if(type == LINE_DOTTED)
  {
    _lineType = type;
    ostringstream oss;
    oss << "\\pgfsetdash{{" << (_pointSize * _unit) << "}{" << (_pointSize * _unit) << "}}{0pt}" << endl;
    _content.push_back(oss.str());
  }
  else throw Exception("PGFGraphicDevice::setCurrentLineType. Unknown line type: " + TextTools::toString(type));
}

void PGFGraphicDevice::setCurrentLayer(int layerIndex)
{ 
  ostringstream oss;
  if(_useLayers)
    oss << "\\end{pgfonlayer}{" << TextTools::toString(_currentLayer) << "}" << endl;
  oss << "\\begin{pgfonlayer}{" << TextTools::toString(layerIndex) << "}" << endl;
  //We have to recall the current color values for this layer:
  oss << "\\pgfsetstrokecolor{" << _fgColor << "}" << endl;
  oss << "\\pgfsetfillcolor{" << _bgColor << "}" << endl;
  _content.push_back(oss.str());
  _currentLayer = layerIndex;
  if(find(_layers.begin(), _layers.end(), layerIndex) == _layers.end()) _layers.push_back(layerIndex);
  _useLayers = true;
  
}

void PGFGraphicDevice::drawLine(double x1, double y1, double x2, double y2)
{
  ostringstream oss;
  oss << "\\pgfpathmoveto{\\pgfpointxy{" << x1 << "}{" << y1 << "}}" << endl;
  oss << "\\pgfpathlineto{\\pgfpointxy{" << x2 << "}{" << y2 << "}}" << endl;
  oss << "\\pgfpathclose" << endl;
  oss << "\\pgfusepath{stroke}" << endl;
  _content.push_back(oss.str());
}
 
void PGFGraphicDevice::drawRect(double x, double y, double width, double height, short fill)
{
  ostringstream oss;
  oss << "\\pgfpathrectangle{\\pgfpointxy{" << x << "}{" << y << "}}{\\pgfpointxy{" << width << "}{" << height << "}}" << endl;
  if(fill == FILL_FILLED)
    oss << "\\pgfusepath{stroke,fill}" << endl;
  else
    oss << "\\pgfusepath{stroke}" << endl;
  _content.push_back(oss.str());
}

void PGFGraphicDevice::drawCircle(double x, double y, double radius, short fill)
{
  ostringstream oss;
  oss << "\\pgfpathcircle{\\pgfpointxy{" << x << "}{" << y << "}}{" << radius << "}" << endl;
  if(fill == FILL_FILLED)
    oss << "\\pgfusepath{stroke,fill}" << endl;
  else
    oss << "\\pgfusepath{stroke}" << endl;
  _content.push_back(oss.str());
}

void PGFGraphicDevice::drawText(double x, double y, const string & text, short hpos, short vpos, double angle)
{
  string anchor;
  if(vpos == TEXT_VERTICAL_BOTTOM)
    anchor = "bottom";
  else if(vpos == TEXT_VERTICAL_TOP)
    anchor = "top";
  else if(vpos == TEXT_VERTICAL_CENTER)
    anchor = "base";
  else throw Exception("PGFGraphicDevice::drawText. Invalid vertical alignment option.");
  if(hpos == TEXT_HORIZONTAL_LEFT)
    anchor += ",left";
  else if(hpos == TEXT_HORIZONTAL_RIGHT)
    anchor += ",right";
  else if(hpos == TEXT_HORIZONTAL_CENTER)
    anchor += "";
  else throw Exception("PGFGraphicDevice::drawText. Invalid horizontal alignment option.");

  ostringstream oss;
  oss << "\\pgftransformrotate{" << angle << "}" << endl;
  oss << "\\pgftext[" << anchor << ",at=\\pgfpointxy{" << x << "}{" << y << "}]{\\textcolor{" << _fgColor << "}" << text << "}" << endl;
  _content.push_back(oss.str());
}

